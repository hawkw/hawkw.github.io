---
layout: post
title:  "A Layer-Based Text Editor"
categories: ideas
---

Gary Bernhardt's ["A Whole New World"](https://www.destroyallsoftware.com/talks/a-whole-new-world) is one of my favourite talks in the field of Computer Science, second only to Guy L. Steele's ["Growing a Language"](https://www.youtube.com/watch?v=_ahvzDzKdB0). All of Mr. Bernhardt's talks are riotously funny, but unlike the light-hearted brevity of ["wat"](https://www.destroyallsoftware.com/talks/wat) ("enough about languages that suck, let's talk about JavaScript") or ["Useing You're Types Good"](https://www.destroyallsoftware.com/talks/useing-youre-types-good) ("types are supposed to make it safe, the program...but when it makes Object it's not safe, which is why I put the fire extinguisher there"), "A Whole New World" uses humor as a vehicle to make some important points about computing as a discipline. 

In "A Whole New World," Bernardt presents an innovative new text editor he claims to have implemented, reveals that implementing this new editor required the implementation of a new terminal emulator, and then finally reveals that both the new text editor and the new terminal emulator are "lies" and that both demos have been rigged. The purpose of this deception is to draw attention to how so many of the core tools that almost every programmer or computer scientist uses, such as text editors, terminal emulators, and even operating systems, almost universally date back to the early days of computing. Bernhardt suggests that these tools and systems deserve to be revisited with modern ideas and technologies, and that the computing industry now focuses on shipping new products as fast as possible, rather than on improving these common tools and infrastructure.

While I strongly agree with the message of "A Whole New World", that's not actually what this blog post is about. Instead, I want to take a moment to talk about one of the features presented in Bernhardt's sham text editor (imaginatively called "`aneditor`"), that I would love to work on implementing, perhaps even as a senior project. `aneditor` is a _layer-based_ editor. This means that information about the source code being edited is stored in separate layers, such as a diff layer, a type-annotation layer, a performance layer, or even a layer showing the result of crash logs from a production environment, which may be overlayed over the code in the editor by entering different modes. The layer-based paradigm presented by Bernhardt allows a terminal-based text editor to present as much information to the programmer as a full-featured IDE, in a highly extensible and customizeable manner.

Terminal based text editors popular today, such as `vim` or `emacs`, are highly extensible, and do allow information from analysis of the source code being edited to be presented to the user. However, they aren't designed from the ground up for this layer-based paradigm, so the kind of information overlaying in Bernhardt's fictional `aneditor` unfortunately isn't really possible. A layer-based text editor that functions in the same manner as the fake one from "A Whole New World" would be, in my opinion, an extremely useful tool, and one I'd love to build. 

While it may be a bit too ambitious for a senior project to be completed over the course of a single semester, one of the goals for such a project would be a high level of modoularity. The editor would only provide a common infrastructure for creating layers, leaving the implementation of layers for specific types of information, different programming languages, and interfacing with external tools up to users who desire those components.